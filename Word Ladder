class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int sts = 1;
        queue<string> q;
        unordered_set<string> ump;
        for(auto word: wordList){
            ump.insert(word);
        }
        if(ump.find(endWord) == ump.end()) return 0;
        q.push(beginWord);
        while(!q.empty()){
            int size = q.size();
            while(size--){
                string front = q.front();
                q.pop();
                ump.erase(front);
                if(front == endWord) return sts;
                for(int idx = 0 ; idx < beginWord.length() ; idx++){
                    char temp = front[idx];
                    for(char ch = 'a' ; ch <= 'z' ; ch++){
                        front[idx] = ch;
                        if(ump.find(front) != ump.end()){
                            q.push(front);
                        }
                    }
                    front[idx] = temp;
                }
            }
            sts++;
        }
        return 0;
    }
};
