class Solution {
public:

vector<int> spiralOrder(vector<vector<int>>& matrix) {
  vector<int> result;
  if (matrix.size() == 0) {
    return result;
  }
  int row_start = 0;
  int row_end = matrix.size() - 1;
  int col_start = 0;
  int col_end = matrix[0].size() - 1;
  while (row_start <= row_end && col_start <= col_end) {
    for (int i = col_start; i <= col_end; i++) {
      result.push_back(matrix[row_start][i]);
    }
    row_start++;
    for (int i = row_start; i <= row_end; i++) {
      result.push_back(matrix[i][col_end]);
    }
    col_end--;
    if (row_start <= row_end) {
      for (int i = col_end; i >= col_start; i--) {
        result.push_back(matrix[row_end][i]);
      }
    }
    row_end--;
    if (col_start <= col_end) {
      for (int i = row_end; i >= row_start; i--) {
        result.push_back(matrix[i][col_start]);
      }
    }
    col_start++;
  }
  return result;
}

int main() {
  vector<vector<int>> matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
  };
  vector<int> result = spiralOrder(matrix);
  for (int i = 0; i < result.size(); i++) {
    cout << result[i] << endl;
  }
  return 0;
}
    
};
